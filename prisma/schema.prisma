// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String   @id @default(uuid()) @map("id")
  nome      String   @map("nome")
  email     String   @unique @map("email")
  senha     String   @map("senha")
  role      Role     @default(CLIENTE) @map("role")
  criadoEm  DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  pedidos    Pedido[]
  avaliacoes Avaliacao[]

  @@map("usuarios")
}

enum Role {
  CLIENTE
  ADMIN
}

model Categoria {
  id        String   @id @default(uuid()) @map("id")
  nome      String   @unique @map("nome")
  slug      String   @unique @map("slug")
  criadoEm  DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  produtos Produto[]

  @@map("categorias")
}

model Marca {
  id        String   @id @default(uuid()) @map("id")
  nome      String   @unique @map("nome")
  slug      String   @unique @map("slug")
  criadoEm  DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  produtos Produto[]

  @@map("marcas")
}

model Produto {
  id        String   @id @default(uuid()) @map("id")
  nome      String   @map("nome")
  descricao String   @map("descricao")
  criadoEm  DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  marcaId     String    @map("marca_id")
  categoriaId String    @map("categoria_id")

  marca      Marca       @relation(fields: [marcaId], references: [id])
  categoria  Categoria   @relation(fields: [categoriaId], references: [id])

  variacoes       VariacaoProduto[]
  especificacoes  EspecificacaoProduto[]
  avaliacoes      Avaliacao[]
  itensPedido     ItemPedido[]

  @@map("produtos")
}

model VariacaoProduto {
  id        String   @id @default(uuid()) @map("id")
  produtoId String   @map("produto_id")
  sku       String   @unique @map("sku")
  preco     Decimal  @map("preco") @db.Decimal(10, 2)
  estoque   Int      @default(0) @map("estoque")
  cor       String?  @map("cor")
  capacidade String?  @map("capacidade")

  criadoEm  DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  produto Produto @relation(fields: [produtoId], references: [id])
  imagens ImagemProduto[]

  @@map("variacoes_produto")
}

model ImagemProduto {
  id        String   @id @default(uuid()) @map("id")
  variacaoProdutoId String @map("variacao_produto_id")
  url       String   @map("url")
  ordem     Int      @default(0) @map("ordem")
  criadoEm  DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  variacaoProduto VariacaoProduto @relation(fields: [variacaoProdutoId], references: [id])

  @@map("imagens_produto")
}

model EspecificacaoProduto {
  id        String   @id @default(uuid()) @map("id")
  produtoId String   @map("produto_id")
  nomeEspecificacao String @map("nome_especificacao")
  valorEspecificacao String @map("valor_especificacao")
  criadoEm  DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  produto Produto @relation(fields: [produtoId], references: [id])

  @@map("especificacoes_produto")
}

model Pedido {
  id         String        @id @default(uuid()) @map("id")
  usuarioId  String        @map("usuario_id")
  total      Decimal       @map("total") @db.Decimal(10,2)
  status     StatusPedido  @default(PENDENTE) @map("status")
  endereco   String        @map("endereco")
  criadoEm   DateTime      @default(now()) @map("criado_em")
  atualizadoEm DateTime    @updatedAt @map("atualizado_em")

  usuario Usuario @relation(fields: [usuarioId], references: [id])
  itens   ItemPedido[]

  @@map("pedidos")
}

model ItemPedido {
  id            String   @id @default(uuid()) @map("id")
  pedidoId      String   @map("pedido_id")
  produtoId     String   @map("produto_id")
  quantidade    Int      @map("quantidade")
  precoUnitario Decimal  @map("preco_unitario") @db.Decimal(10,2)

  pedido  Pedido  @relation(fields: [pedidoId], references: [id])
  produto Produto @relation(fields: [produtoId], references: [id])

  @@map("itens_pedido")
}

model Avaliacao {
  id          String   @id @default(uuid()) @map("id")
  usuarioId   String   @map("usuario_id")
  produtoId   String   @map("produto_id")
  nota        Int      @map("nota")
  comentario  String   @map("comentario")
  criadoEm    DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  produto   Produto @relation(fields: [produtoId], references: [id])

  @@map("avaliacoes")
}

enum StatusPedido {
  PENDENTE
  PAGO
  ENVIADO
  ENTREGUE
  CANCELADO
}
