generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para o papel do usuário
enum Role {
  CLIENTE
  ADMIN
}

// Enum para o status do pedido
enum StatusPedido {
  PENDENTE
  PAGO
  ENVIADO
  ENTREGUE
  CANCELADO
}

model Usuario {
  id             String    @id @default(uuid()) @map("id")
  nome           String    @map("nome")
  email          String    @unique @map("email")
  senha          String    @map("senha")
  role           Role      @default(CLIENTE) @map("role")
  criadoEm       DateTime  @default(now()) @map("criado_em")
  atualizadoEm   DateTime  @updatedAt @map("atualizado_em")

  // Relações
  pedidos        Pedido[]
  avaliacoes     Avaliacao[]

  @@map("usuarios")
}

model Categoria {
  id             String    @id @default(uuid()) @map("id")
  nome           String    @unique @map("nome")
  slug           String    @unique @map("slug")
  criadoEm       DateTime  @default(now()) @map("criado_em")
  atualizadoEm   DateTime  @updatedAt @map("atualizado_em")

  // Relações
  produtos       Produto[]

  @@map("categorias")
}

model Marca {
  id             String    @id @default(uuid()) @map("id")
  nome           String    @unique @map("nome")
  slug           String    @unique @map("slug")
  criadoEm       DateTime  @default(now()) @map("criado_em")
  atualizadoEm   DateTime  @updatedAt @map("atualizado_em")

  // Relações
  produtos       Produto[]

  @@map("marcas")
}

model Produto {
  id             String    @id @default(uuid()) @map("id")
  nome           String    @map("nome")
  slug           String    @unique @map("slug")
  descricao      String    @map("descricao")
  criadoEm       DateTime  @default(now()) @map("criado_em")
  atualizadoEm   DateTime  @updatedAt @map("atualizado_em")

  // Chaves estrangeiras
  marcaId        String    @map("marca_id")
  categoriaId    String    @map("categoria_id")

  // Relações (sem onDelete: Cascade neste lado, pois são campos de lista)
  marca          Marca                 @relation(fields: [marcaId], references: [id])
  categoria      Categoria             @relation(fields: [categoriaId], references: [id])
  variacoes      VariacaoProduto[]
  especificacoes EspecificacaoProduto[]
  avaliacoes     Avaliacao[]
  itensPedido    ItemPedido[]

  @@map("produtos")
}

model VariacaoProduto {
  id                String          @id @default(uuid()) @map("id")
  produtoId         String          @map("produto_id")
  sku               String          @unique @map("sku")
  preco             Decimal         @map("preco") @db.Decimal(10, 2)
  estoque           Int             @default(0) @map("estoque")
  cor               String?         @map("cor")
  capacidade        String?         @map("capacidade")
  criadoEm          DateTime        @default(now()) @map("criado_em")
  atualizadoEm      DateTime        @updatedAt @map("atualizado_em")

  // Relações (onDelete: Cascade no lado da chave estrangeira)
  produto           Produto         @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  imagens           ImagemProduto[] // Sem onDelete: Cascade aqui
  
  @@map("variacoes_produto")
}

model ImagemProduto {
  id                  String           @id @default(uuid()) @map("id")
  variacaoProdutoId   String           @map("variacao_produto_id")
  url                 String           @map("url")
  ordem               Int              @default(0) @map("ordem")
  criadoEm            DateTime         @default(now()) @map("criado_em")
  atualizadoEm        DateTime         @updatedAt @map("atualizado_em")

  // Relações (onDelete: Cascade no lado da chave estrangeira)
  variacaoProduto     VariacaoProduto @relation(fields: [variacaoProdutoId], references: [id], onDelete: Cascade)

  @@map("imagens_produto")
}

model EspecificacaoProduto {
  id                  String   @id @default(uuid()) @map("id")
  produtoId           String   @map("produto_id")
  nomeEspecificacao   String   @map("nome_especificacao")
  valorEspecificacao  String   @map("valor_especificacao")
  criadoEm            DateTime @default(now()) @map("criado_em")
  atualizadoEm        DateTime @updatedAt @map("atualizado_em")

  // Relações (onDelete: Cascade no lado da chave estrangeira)
  produto             Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@map("especificacoes_produto")
}

model Pedido {
  id             String       @id @default(uuid()) @map("id")
  usuarioId      String       @map("usuario_id")
  total          Decimal      @map("total") @db.Decimal(10,2)
  status         StatusPedido @default(PENDENTE) @map("status")
  endereco       String       @map("endereco") // Considerar um Model Endereco separado no futuro
  criadoEm       DateTime     @default(now()) @map("criado_em")
  atualizadoEm   DateTime     @updatedAt @map("atualizado_em")

  // Relações (onDelete: Cascade para itens do pedido, mas não para o usuário, que deve permanecer)
  usuario        Usuario      @relation(fields: [usuarioId], references: [id])
  itens          ItemPedido[]

  @@map("pedidos")
}

model ItemPedido {
  id             String    @id @default(uuid()) @map("id")
  pedidoId       String    @map("pedido_id")
  produtoId      String    @map("produto_id")
  quantidade     Int       @map("quantidade")
  precoUnitario  Decimal   @map("preco_unitario") @db.Decimal(10,2)
  criadoEm       DateTime  @default(now()) @map("criado_em")
  atualizadoEm   DateTime  @updatedAt @map("atualizado_em")

  // Relações (onDelete: Cascade no lado da chave estrangeira)
  pedido         Pedido    @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  produto        Produto   @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@map("itens_pedido")
}

model Avaliacao {
  id             String   @id @default(uuid()) @map("id")
  usuarioId      String   @map("usuario_id")
  produtoId      String   @map("produto_id")
  nota           Int      @map("nota") // Ex: 1 a 5
  comentario     String?  @map("comentario")
  criadoEm       DateTime @default(now()) @map("criado_em")
  atualizadoEm   DateTime @updatedAt @map("atualizado_em")

  // Relações (onDelete: Cascade no lado da chave estrangeira)
  usuario        Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade) 
  produto        Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade) 

  @@map("avaliacoes")
}